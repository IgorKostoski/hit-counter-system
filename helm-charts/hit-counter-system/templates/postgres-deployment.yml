{{- if .Values.postgresql.enabled }}
apiVersion: apps/v1
kind: Deployment # Or StatefulSet for production
metadata:
  name: {{ .Values.postgresql.name }}
  namespace: {{  .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.postgresql.name }}
    helm.sh/chart: {{ include "hit-counter-system.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.postgresql.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.postgresql.name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: database
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
          imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
          ports:
            - name: tcp-postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: {{ printf "%s-config" .Values.postgresql.name }}
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-secret" .Values.postgresql.name }}
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-secret" .Values.postgresql.name }}
                  key: POSTGRES_PASSWORD
          {{- if .Values.postgresql.persistence.enabled }}
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          {{- else }}
          volumeMounts:
            - name: postgres-storage-emptydir
              mountPath: /var/lib/postgresql/data
          {{- end }}
          # Liveness and Readiness probes for Postgres are good practice
          # but omitted here for brevity. Consider adding them.
      {{- if .Values.postgresql.persistence.enabled }}
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: {{ printf "%s-pvc" .Values.postgresql.name }}
      {{- else }}
      volumes:
        - name: postgres-storage-emptydir
          emptyDir: {}
        {{- end }}
{{- end }}